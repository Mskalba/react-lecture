{"version":3,"sources":["component/Button.jsx","component/ListItem.jsx","container/ListContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","onClick","handleChange","type","text","ListItem","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","state","isEdited","setState","window","addEventListener","nextProps","nextState","name","role","component_Button","bind","React","Component","ListContainer","edited","loginButton","logoutButton","component_ListItem","concat","App","Fragment","container_ListContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.006ecdea.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Button(props) {\r\n    return <button className=\"btn btn-secondary\" onClick={props.handleChange} type={props.type || 'button'}>{props.text}</button>\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nclass ListItem extends React.Component {\r\n    constructor() {\r\n        console.log('Constructor');\r\n        super();\r\n        this.state = {\r\n            isEdited: false\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        console.log('componentWillMount');\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('componentDidMount- Ajax');\r\n        window.addEventListener('resize', function() {\r\n\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log('componentWillReceiveProps- zmiana stanu w oparciu o propsy');\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // if(jedyna rzecz ktora sie zmienila to state.isEdited) {\r\n        //     return false;\r\n        // }\r\n        console.log('shouldComponentUpdate');\r\n\r\n        return true;\r\n    }\r\n\r\n    componentWillUpdate(nextProps) {\r\n        console.log('componentWillUpdate');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log('componentDidUpdate');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount- czyszczenie przegladarki po nasyzm komponencie');\r\n    }\r\n\r\n    handleChange = () => {\r\n        if(!this.state.isEdited) {\r\n            this.props.handleChange();\r\n            this.setState({\r\n                isEdited: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Render\");\r\n        return (\r\n            <li className=\"d-flex flex-row list-group-item\">\r\n                <div className=\"mr-auto  p-2\">\r\n                    {this.props.name}\r\n                </div>\r\n                <div className=\"p-2 btn-group\" role=\"group\">\r\n                    <Button handleChange={this.handleChange.bind(this)} text=\"edit\" />\r\n                    <Button text=\"delete\" />\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListItem;","import React from \"react\";\r\nimport ListItem from \"../component/ListItem\";\r\n\r\nclass ListContainer extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            edited: 0\r\n        }\r\n    }\r\n\r\n    handleChange = () => {\r\n        this.setState({\r\n            edited: this.state.edited + 1\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let loginButton = null;\r\n        let logoutButton = null;\r\n        if(this.state.edited === 0) {\r\n            loginButton = <h2>Login</h2>;\r\n        } else {\r\n            logoutButton = <h2>Logout</h2>;\r\n        }\r\n        return (\r\n        <div>\r\n            {this.state.edited === 0 && <h2>Login</h2>}\r\n            {this.state.edited === 0 ?\r\n                <h2>Login</h2>: \r\n                <h3>cokolwiek</h3>\r\n            }\r\n\r\n            {loginButton}\r\n\r\n            <h2>\r\n                Zeedytowano: {this.state.edited}\r\n            </h2>\r\n\r\n            {this.state.edited > 0 ?\r\n            <h2>Logout</h2> :\r\n            null}\r\n\r\n            {logoutButton}\r\n            <ul className=\"list-group\">\r\n                {this.state.edited === 0 ?\r\n                <ListItem\r\n                    handleChange={this.handleChange.bind(this)}\r\n                    name={`Maciej ${this.state.edited}`}\r\n                /> :\r\n                null}\r\n            </ul>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport ListContainer from './container/ListContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <ListContainer name=\"Maciek\"/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}